<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="group.xuxiake.mapper.FileUploadMapper">
  <resultMap id="BaseResultMap" type="group.xuxiake.entity.FileUpload">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="upload_time" jdbcType="TIMESTAMP" property="uploadTime" />
    <result column="file_path" jdbcType="VARCHAR" property="filePath" />
    <result column="File_Save_Name" jdbcType="VARCHAR" property="fileSaveName" />
    <result column="File_Real_Name" jdbcType="VARCHAR" property="fileRealName" />
    <result column="file_Ext_Name" jdbcType="VARCHAR" property="fileExtName" />
    <result column="file_Size" jdbcType="VARCHAR" property="fileSize" />
    <result column="file_Type" jdbcType="INTEGER" property="fileType" />
    <result column="is_Dir" jdbcType="INTEGER" property="isDir" />
    <result column="upload_User_Id" jdbcType="VARCHAR" property="uploadUserId" />
    <result column="parent_id" jdbcType="INTEGER" property="parentId" />
    <result column="media_Cache_Path" jdbcType="VARCHAR" property="mediaCachePath" />
    <result column="md5_Hex" jdbcType="VARCHAR" property="md5Hex" />
    <result column="file_Status" jdbcType="VARCHAR" property="fileStatus" />
    <result column="Shoot_Time" jdbcType="TIMESTAMP" property="shootTime" />
    <result column="img_width" jdbcType="INTEGER" property="imgWidth" />
    <result column="img_height" jdbcType="INTEGER" property="imgHeight" />
  </resultMap>
  <sql id="Base_Column_List">
    id, upload_time, file_path, File_Save_Name, File_Real_Name, file_Ext_Name, file_Size,
    file_Type, is_Dir, upload_User_Id, parent_id, media_Cache_Path, md5_Hex, file_Status,
    Shoot_Time, img_width, img_height
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from fileupload
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from fileupload
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="group.xuxiake.entity.FileUpload">
    insert into fileupload (id, upload_time, file_path,
      File_Save_Name, File_Real_Name, file_Ext_Name,
      file_Size, file_Type, is_Dir,
      upload_User_Id, parent_id, media_Cache_Path,
      md5_Hex, file_Status, Shoot_Time,
      img_width, img_height)
    values (#{id,jdbcType=INTEGER}, #{uploadTime,jdbcType=TIMESTAMP}, #{filePath,jdbcType=VARCHAR},
      #{fileSaveName,jdbcType=VARCHAR}, #{fileRealName,jdbcType=VARCHAR}, #{fileExtName,jdbcType=VARCHAR},
      #{fileSize,jdbcType=VARCHAR}, #{fileType,jdbcType=INTEGER}, #{isDir,jdbcType=INTEGER},
      #{uploadUserId,jdbcType=VARCHAR}, #{parentId,jdbcType=INTEGER}, #{mediaCachePath,jdbcType=VARCHAR},
      #{md5Hex,jdbcType=VARCHAR}, #{fileStatus,jdbcType=VARCHAR}, #{shootTime,jdbcType=TIMESTAMP},
      #{imgWidth,jdbcType=INTEGER}, #{imgHeight,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="group.xuxiake.entity.FileUpload" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
    insert into fileupload
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="uploadTime != null">
        upload_time,
      </if>
      <if test="filePath != null">
        file_path,
      </if>
      <if test="fileSaveName != null">
        File_Save_Name,
      </if>
      <if test="fileRealName != null">
        File_Real_Name,
      </if>
      <if test="fileExtName != null">
        file_Ext_Name,
      </if>
      <if test="fileSize != null">
        file_Size,
      </if>
      <if test="fileType != null">
        file_Type,
      </if>
      <if test="isDir != null">
        is_Dir,
      </if>
      <if test="uploadUserId != null">
        upload_User_Id,
      </if>
      <if test="parentId != null">
        parent_id,
      </if>
      <if test="mediaCachePath != null">
        media_Cache_Path,
      </if>
      <if test="md5Hex != null">
        md5_Hex,
      </if>
      <if test="fileStatus != null">
        file_Status,
      </if>
      <if test="shootTime != null">
        Shoot_Time,
      </if>
      <if test="imgWidth != null">
        img_width,
      </if>
      <if test="imgHeight != null">
        img_height,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="uploadTime != null">
        #{uploadTime,jdbcType=TIMESTAMP},
      </if>
      <if test="filePath != null">
        #{filePath,jdbcType=VARCHAR},
      </if>
      <if test="fileSaveName != null">
        #{fileSaveName,jdbcType=VARCHAR},
      </if>
      <if test="fileRealName != null">
        #{fileRealName,jdbcType=VARCHAR},
      </if>
      <if test="fileExtName != null">
        #{fileExtName,jdbcType=VARCHAR},
      </if>
      <if test="fileSize != null">
        #{fileSize,jdbcType=VARCHAR},
      </if>
      <if test="fileType != null">
        #{fileType,jdbcType=INTEGER},
      </if>
      <if test="isDir != null">
        #{isDir,jdbcType=INTEGER},
      </if>
      <if test="uploadUserId != null">
        #{uploadUserId,jdbcType=VARCHAR},
      </if>
      <if test="parentId != null">
        #{parentId,jdbcType=INTEGER},
      </if>
      <if test="mediaCachePath != null">
        #{mediaCachePath,jdbcType=VARCHAR},
      </if>
      <if test="md5Hex != null">
        #{md5Hex,jdbcType=VARCHAR},
      </if>
      <if test="fileStatus != null">
        #{fileStatus,jdbcType=VARCHAR},
      </if>
      <if test="shootTime != null">
        #{shootTime,jdbcType=TIMESTAMP},
      </if>
      <if test="imgWidth != null">
        #{imgWidth,jdbcType=INTEGER},
      </if>
      <if test="imgHeight != null">
        #{imgHeight,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="group.xuxiake.entity.FileUpload">
    update fileupload
    <set>
      <if test="uploadTime != null">
        upload_time = #{uploadTime,jdbcType=TIMESTAMP},
      </if>
      <if test="filePath != null">
        file_path = #{filePath,jdbcType=VARCHAR},
      </if>
      <if test="fileSaveName != null">
        File_Save_Name = #{fileSaveName,jdbcType=VARCHAR},
      </if>
      <if test="fileRealName != null">
        File_Real_Name = #{fileRealName,jdbcType=VARCHAR},
      </if>
      <if test="fileExtName != null">
        file_Ext_Name = #{fileExtName,jdbcType=VARCHAR},
      </if>
      <if test="fileSize != null">
        file_Size = #{fileSize,jdbcType=VARCHAR},
      </if>
      <if test="fileType != null">
        file_Type = #{fileType,jdbcType=INTEGER},
      </if>
      <if test="isDir != null">
        is_Dir = #{isDir,jdbcType=INTEGER},
      </if>
      <if test="uploadUserId != null">
        upload_User_Id = #{uploadUserId,jdbcType=VARCHAR},
      </if>
      <if test="parentId != null">
        parent_id = #{parentId,jdbcType=INTEGER},
      </if>
      <if test="mediaCachePath != null">
        media_Cache_Path = #{mediaCachePath,jdbcType=VARCHAR},
      </if>
      <if test="md5Hex != null">
        md5_Hex = #{md5Hex,jdbcType=VARCHAR},
      </if>
      <if test="fileStatus != null">
        file_Status = #{fileStatus,jdbcType=VARCHAR},
      </if>
      <if test="shootTime != null">
        Shoot_Time = #{shootTime,jdbcType=TIMESTAMP},
      </if>
      <if test="imgWidth != null">
        img_width = #{imgWidth,jdbcType=INTEGER},
      </if>
      <if test="imgHeight != null">
        img_height = #{imgHeight,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="group.xuxiake.entity.FileUpload">
    update fileupload
    set upload_time = #{uploadTime,jdbcType=TIMESTAMP},
      file_path = #{filePath,jdbcType=VARCHAR},
      File_Save_Name = #{fileSaveName,jdbcType=VARCHAR},
      File_Real_Name = #{fileRealName,jdbcType=VARCHAR},
      file_Ext_Name = #{fileExtName,jdbcType=VARCHAR},
      file_Size = #{fileSize,jdbcType=VARCHAR},
      file_Type = #{fileType,jdbcType=INTEGER},
      is_Dir = #{isDir,jdbcType=INTEGER},
      upload_User_Id = #{uploadUserId,jdbcType=VARCHAR},
      parent_id = #{parentId,jdbcType=INTEGER},
      media_Cache_Path = #{mediaCachePath,jdbcType=VARCHAR},
      md5_Hex = #{md5Hex,jdbcType=VARCHAR},
      file_Status = #{fileStatus,jdbcType=VARCHAR},
      Shoot_Time = #{shootTime,jdbcType=TIMESTAMP},
      img_width = #{imgWidth,jdbcType=INTEGER},
      img_height = #{imgHeight,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>


  <resultMap id="MyResultMap" type="group.xuxiake.entity.FileUpload" extends="BaseResultMap">
    <result column="pathname" property="pathname"/>
  </resultMap>

  <select id="findFileBySaveName" resultMap="BaseResultMap">
  	select * from fileupload where file_Save_Name=#{fileSaveName} and file_Status=${@group.xuxiake.util.NetdiskConstant@FILE_STATUS_OF_NORMAL}
  </select>
  <select id="findFileBySaveNameForReback" resultMap="BaseResultMap">
  	select * from fileupload where file_Save_Name=#{fileSaveName}
  </select>

  <!-- 不需要判断文件状态 -->
  <select id="findFileByMd5Hex" resultMap="BaseResultMap">
  	select * from fileupload where md5_Hex=#{md5Hex}
  </select>

  <select id="findFileByRealName" resultMap="BaseResultMap" parameterType="group.xuxiake.entity.FileUpload">
  	select * 
  	from fileupload
  	where upload_User_Id=#{uploadUserId} and file_Real_Name=#{fileRealName} and parent_id=#{parentId} and file_Type=${@group.xuxiake.util.NetdiskConstant@FILE_IS_DIR} and file_Status=${@group.xuxiake.util.NetdiskConstant@FILE_STATUS_OF_NORMAL}
  </select>

  <select id="findAllFile" resultMap="MyResultMap">
    select f.*
    <if test="(fileUpload.fileRealName!=null and fileUpload.fileRealName!='') or (fileTypes != null and fileTypes.size() > 0)">
      , CONCAT('/', fn_tree_pathname(f.parent_id, '/')) as pathname
    </if>
    from fileupload f
    where
    f.upload_User_Id=#{fileUpload.uploadUserId}
    and f.file_Status = ${@group.xuxiake.util.NetdiskConstant@FILE_STATUS_OF_NORMAL}
    <if test="fileUpload.parentId!=null">
      and parent_id=#{fileUpload.parentId}
    </if>
    <if test="fileUpload.fileRealName!=null and fileUpload.fileRealName!=''">
      and file_Real_Name like  concat("%",#{fileUpload.fileRealName},"%")
    </if>
    <if test="fileTypes != null and fileTypes.size() > 0">
      and
      <foreach collection="fileTypes" open="(" separator="or" close=")" item="fileType">
        file_type = #{fileType}
      </foreach>
    </if>
    order by is_Dir, upload_Time desc
  </select>

  <delete id="deleteFile">
  	update fileupload set file_Status=${@group.xuxiake.util.NetdiskConstant@FILE_STATUS_OF_DEL} where file_Save_Name=#{fileSaveName}
  </delete>

  <select id="getSumsizeDel" parameterType="map" statementType="CALLABLE">
  	{call get_sumsize_del(#{id,jdbcType=INTEGER,mode=IN},#{sumsize,jdbcType=INTEGER,mode=OUT})}
  </select>

  <select id="deleteDir" parameterType="int" statementType="CALLABLE">
  	{
  		call delete_dir(#{id,jdbcType=INTEGER,mode=IN})
  	}
  </select>

  <select id="getSumsizeRbk" parameterType="map" statementType="CALLABLE">
  	{call get_sumsize_rbk(#{id,jdbcType=INTEGER,mode=IN},#{sumsize,jdbcType=INTEGER,mode=OUT})}
  </select>

  <select id="rebackDir" parameterType="int" statementType="CALLABLE">
  	{
  		call reback_dir(#{id,jdbcType=INTEGER,mode=IN})
  	}
  </select>

  <select id="findAllDir" parameterType="group.xuxiake.entity.FileUpload" resultMap="BaseResultMap">
  	select * from 
  	fileupload
  	where upload_User_Id=#{uploadUserId} and parent_id=#{parentId} and file_Status=${@group.xuxiake.util.NetdiskConstant@FILE_STATUS_OF_NORMAL} and is_Dir=${@group.xuxiake.util.NetdiskConstant@FILE_IS_DIR}
  	order by upload_Time desc
  </select>

  <update id="moveFile" parameterType="group.xuxiake.entity.FileUpload">
  	update fileupload set parent_id=#{parentId} where upload_User_Id=#{uploadUserId} and file_Save_Name=#{fileSaveName}
  </update>

  <update id="updateFileSelective" parameterType="group.xuxiake.entity.FileUpload">
    update fileupload
    <set>
      <if test="uploadTime != null">
        upload_time = #{uploadTime,jdbcType=TIMESTAMP},
      </if>
      <if test="filePath != null">
        file_path = #{filePath,jdbcType=VARCHAR},
      </if>
      <if test="fileSaveName != null">
        File_Save_Name = #{fileSaveName,jdbcType=VARCHAR},
      </if>
      <if test="fileRealName != null">
        File_Real_Name = #{fileRealName,jdbcType=VARCHAR},
      </if>
      <if test="fileExtName != null">
        file_Ext_Name = #{fileExtName,jdbcType=VARCHAR},
      </if>
      <if test="fileSize != null">
        file_Size = #{fileSize,jdbcType=VARCHAR},
      </if>
      <if test="fileType != null">
        file_Type = #{fileType,jdbcType=INTEGER},
      </if>
      <if test="isDir != null">
        is_Dir = #{isDir,jdbcType=INTEGER},
      </if>
      <if test="uploadUserId != null">
        upload_User_Id = #{uploadUserId,jdbcType=VARCHAR},
      </if>
      <if test="parentId != null">
        parent_id = #{parentId,jdbcType=INTEGER},
      </if>
      <if test="mediaCachePath != null">
        media_Cache_Path = #{mediaCachePath,jdbcType=VARCHAR},
      </if>
      <if test="md5Hex != null">
        md5_Hex = #{md5Hex,jdbcType=VARCHAR},
      </if>
      <if test="fileStatus != null">
        file_Status = #{fileStatus,jdbcType=VARCHAR},
      </if>
    </set>
    where file_Save_Name = #{fileSaveName}
  </update>

  <select id="findAllImg" resultMap="BaseResultMap">
  	select * from fileupload 
  	where 
  	file_Status=${@group.xuxiake.util.NetdiskConstant@FILE_STATUS_OF_NORMAL} and
  	upload_user_id=#{userId} and
  	file_type=${@group.xuxiake.util.NetdiskConstant@FILE_TYPE_OF_PIC}
  	order by shoot_time desc
  </select>

  <select id="findPathname" resultType="String">
  	select fn_tree_pathname(#{parentId}, '/')
  </select>

  <select id="findChildIds" resultType="int" parameterType="int" statementType="CALLABLE">
    {
      call pro_show_childlist(#{fileId,jdbcType=INTEGER,mode=IN})
    }
  </select>

  <select id="findIdPath" resultType="string">
    select fn_tree_path(#{fileId}, '/')
  </select>
</mapper>